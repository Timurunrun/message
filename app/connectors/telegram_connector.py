from __future__ import annotations

import asyncio
from datetime import datetime, timezone
from typing import Optional
import random

from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart
from aiogram.types import Message
from loguru import logger

from app.core.models import IncomingMessage, Channel
from .base import BaseConnector, OnMessageCallback


def _parse_tg_chat_id(chat_id: str) -> tuple[str, Optional[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chat_id, business_connection_id or None).
    –ö–æ–¥–∏—Ä—É–µ–º id –±–∏–∑–Ω–µ—Å-—á–∞—Ç–æ–≤ –∫–∞–∫: "<chat_id>:<business_connection_id>".
    """
    if ":" in chat_id:
        try:
            cid, bcid = chat_id.split(":", 1)
            return cid, (bcid or None)
        except Exception:
            return chat_id, None
    return chat_id, None


class TelegramConnector(BaseConnector):
    def __init__(self, bot_token: str) -> None:
        self._bot = Bot(token=bot_token)
        self._dp = Dispatcher()
        self._router = Router()
        self._dp.include_router(self._router)
        self._on_message: Optional[OnMessageCallback] = None
        self._polling_task: Optional[asyncio.Task] = None

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self._router.message.register(self._handle_message)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Business Mode
        self._router.business_message.register(self._handle_business_message)
        self._router.business_connection.register(self._handle_business_connection)

    @property
    def name(self) -> str:
        return "telegram"

    @property
    def channel(self) -> Channel:
        return Channel.telegram

    async def start(self, on_message: OnMessageCallback) -> None:
        self._on_message = on_message
        if self._polling_task is None or self._polling_task.done():
            self._polling_task = asyncio.create_task(self._run_polling())
        logger.info("Telegram-–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

    async def stop(self) -> None:
        if self._polling_task and not self._polling_task.done():
            self._polling_task.cancel()
            try:
                await self._polling_task
            except asyncio.CancelledError:
                pass
        await self._bot.session.close()
        logger.info("Telegram-–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _run_polling(self) -> None:
        await self._dp.start_polling(self._bot, allowed_updates=self._dp.resolve_used_update_types())

    async def _handle_message(self, message: Message) -> None:
        if self._on_message is None:
            return
        text = message.text or message.caption or ""
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id if message.from_user else message.chat.id)

        # –ï—Å–ª–∏ aiogram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç business_connection_id —É —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
        bc_id = getattr(message, "business_connection_id", None)
        try:
            if bc_id is None:
                md = message.model_dump()
                bc_id = md.get("business_connection_id")
        except Exception:
            bc_id = None
        stored_chat_id = f"{chat_id}:{bc_id}" if bc_id else chat_id

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º /start
        if text.strip().startswith("/start"):
            try:
                await self.send_message(
                    chat_id=stored_chat_id,
                    text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ –ø–∏—Ç–∞–Ω–∏—è.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä üçΩÔ∏è",
                )
            except Exception:
                pass
            return

        incoming = IncomingMessage(
            channel=self.channel,
            chat_id=stored_chat_id,
            user_id=user_id,
            text=text,
            timestamp=datetime.now(timezone.utc),
            raw=message.model_dump(),
        )
        await self._on_message(incoming)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
    async def _handle_business_message(self, message: Message) -> None:
        
        if self._on_message is None:
            return
        text = message.text or message.caption or ""
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id if message.from_user else message.chat.id)
        # –£ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å business_connection_id
        bc_id = getattr(message, "business_connection_id", None)
        try:
            if bc_id is None:
                md = message.model_dump()
                bc_id = md.get("business_connection_id")
        except Exception:
            bc_id = None
        stored_chat_id = f"{chat_id}:{bc_id}" if bc_id else chat_id
        incoming = IncomingMessage(
            channel=self.channel,
            chat_id=stored_chat_id,
            user_id=user_id,
            text=text,
            timestamp=datetime.now(timezone.utc),
            raw=message.model_dump(),
        )
        await self._on_message(incoming)

    async def _handle_business_connection(self, message: Message) -> None:
        # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        try:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", message.model_dump())
        except Exception:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

    async def send_message(self, chat_id: str, text: str) -> None:
        base_chat_id, bc_id = _parse_tg_chat_id(chat_id)
        if bc_id:
            await self._bot.send_message(chat_id=base_chat_id, text=text, business_connection_id=bc_id)
        else:
            await self._bot.send_message(chat_id=base_chat_id, text=text)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
    async def simulate_typing(self, chat_id: str, seconds: float) -> None:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–±–æ—Ä–∞
        # await asyncio.sleep(random.uniform(1.0, 3.0))
        remaining = max(0.0, float(seconds))
        pulse = 4.5  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        base_chat_id, bc_id = _parse_tg_chat_id(chat_id)
        while remaining > 0:
            try:
                if bc_id:
                    await self._bot.send_chat_action(chat_id=base_chat_id, action=ChatAction.TYPING, business_connection_id=bc_id)
                else:
                    await self._bot.send_chat_action(chat_id=base_chat_id, action=ChatAction.TYPING)
            except Exception:
                pass
            sleep_time = min(pulse, remaining)
            await asyncio.sleep(sleep_time)
            remaining -= sleep_time
